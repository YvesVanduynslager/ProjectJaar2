// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using TILE03.Data;

namespace TILE03.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180405123934_updateOefeningMapping")]
    partial class updateOefeningMapping
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TILE03.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Actie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Omschrijving");

                    b.Property<int?>("UniekPadId");

                    b.HasKey("Id");

                    b.HasIndex("UniekPadId");

                    b.ToTable("Actie");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Antwoord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Antwoord");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Groep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SessieId");

                    b.Property<int?>("UniekePadId");

                    b.HasKey("Id");

                    b.HasIndex("SessieId");

                    b.HasIndex("UniekePadId")
                        .IsUnique()
                        .HasFilter("[UniekePadId] IS NOT NULL");

                    b.ToTable("Groepen");
                });

            modelBuilder.Entity("TILE03.Models.Domain.GroepsBewerking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("GroepsBewerking");

                    b.HasDiscriminator<string>("Type").HasValue("GroepsBewerking");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Klas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.HasKey("Id");

                    b.ToTable("Klas");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Leerling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroepId");

                    b.Property<int?>("KlasId");

                    b.Property<string>("Naam");

                    b.Property<string>("Voornam");

                    b.HasKey("Id");

                    b.HasIndex("GroepId");

                    b.HasIndex("KlasId");

                    b.ToTable("Leerling");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Oefening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AntwoordId");

                    b.Property<int?>("GroepsBewerkingId");

                    b.Property<string>("Naam");

                    b.Property<string>("OpgaveFile");

                    b.HasKey("Id");

                    b.HasIndex("AntwoordId")
                        .IsUnique()
                        .HasFilter("[AntwoordId] IS NOT NULL");

                    b.HasIndex("GroepsBewerkingId");

                    b.ToTable("Oefeningen");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Opdracht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsOpgelost");

                    b.Property<int?>("OefeningId");

                    b.Property<int?>("ToegangscodeId");

                    b.Property<int?>("UniekPadId");

                    b.Property<int>("VolgNr");

                    b.HasKey("Id");

                    b.HasIndex("OefeningId");

                    b.HasIndex("ToegangscodeId")
                        .IsUnique()
                        .HasFilter("[ToegangscodeId] IS NOT NULL");

                    b.HasIndex("UniekPadId");

                    b.ToTable("Opdrachten");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Sessie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int?>("KlasId");

                    b.Property<string>("Naam");

                    b.Property<string>("Omschrijving");

                    b.HasKey("Id");

                    b.HasIndex("KlasId")
                        .IsUnique()
                        .HasFilter("[KlasId] IS NOT NULL");

                    b.ToTable("Sessies");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Toegangscode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.HasKey("Id");

                    b.ToTable("Toegangscode");
                });

            modelBuilder.Entity("TILE03.Models.Domain.UniekPad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("UniekePaden");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Aftrekken", b =>
                {
                    b.HasBaseType("TILE03.Models.Domain.GroepsBewerking");

                    b.Property<double>("Param");

                    b.ToTable("Aftrekken");

                    b.HasDiscriminator().HasValue("Aftrekken");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Delen", b =>
                {
                    b.HasBaseType("TILE03.Models.Domain.GroepsBewerking");

                    b.Property<double>("Param")
                        .HasColumnName("Delen_Param");

                    b.ToTable("Delen");

                    b.HasDiscriminator().HasValue("Delen");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Optellen", b =>
                {
                    b.HasBaseType("TILE03.Models.Domain.GroepsBewerking");

                    b.Property<double>("Param")
                        .HasColumnName("Optellen_Param");

                    b.ToTable("Optellen");

                    b.HasDiscriminator().HasValue("Optellen");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Vermenigvuldig", b =>
                {
                    b.HasBaseType("TILE03.Models.Domain.GroepsBewerking");

                    b.Property<double>("Param")
                        .HasColumnName("Vermenigvuldig_Param");

                    b.ToTable("Vermenigvuldig");

                    b.HasDiscriminator().HasValue("Vermenigvuldig");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TILE03.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TILE03.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TILE03.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TILE03.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TILE03.Models.Domain.Actie", b =>
                {
                    b.HasOne("TILE03.Models.Domain.UniekPad")
                        .WithMany("Acties")
                        .HasForeignKey("UniekPadId");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Groep", b =>
                {
                    b.HasOne("TILE03.Models.Domain.Sessie")
                        .WithMany("Groepen")
                        .HasForeignKey("SessieId");

                    b.HasOne("TILE03.Models.Domain.UniekPad", "UniekePad")
                        .WithOne()
                        .HasForeignKey("TILE03.Models.Domain.Groep", "UniekePadId");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Leerling", b =>
                {
                    b.HasOne("TILE03.Models.Domain.Groep")
                        .WithMany("Leerlingen")
                        .HasForeignKey("GroepId");

                    b.HasOne("TILE03.Models.Domain.Klas")
                        .WithMany("Leerlingen")
                        .HasForeignKey("KlasId");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Oefening", b =>
                {
                    b.HasOne("TILE03.Models.Domain.Antwoord", "Antwoord")
                        .WithOne()
                        .HasForeignKey("TILE03.Models.Domain.Oefening", "AntwoordId");

                    b.HasOne("TILE03.Models.Domain.GroepsBewerking", "GroepsBewerking")
                        .WithMany()
                        .HasForeignKey("GroepsBewerkingId");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Opdracht", b =>
                {
                    b.HasOne("TILE03.Models.Domain.Oefening", "Oefening")
                        .WithMany()
                        .HasForeignKey("OefeningId");

                    b.HasOne("TILE03.Models.Domain.Toegangscode", "Toegangscode")
                        .WithOne()
                        .HasForeignKey("TILE03.Models.Domain.Opdracht", "ToegangscodeId");

                    b.HasOne("TILE03.Models.Domain.UniekPad")
                        .WithMany("Opdrachten")
                        .HasForeignKey("UniekPadId");
                });

            modelBuilder.Entity("TILE03.Models.Domain.Sessie", b =>
                {
                    b.HasOne("TILE03.Models.Domain.Klas", "Klas")
                        .WithOne()
                        .HasForeignKey("TILE03.Models.Domain.Sessie", "KlasId");
                });
#pragma warning restore 612, 618
        }
    }
}
